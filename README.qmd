---
title: "Bayesian Penalized Transformation Models in Liesel"
format: gfm
execute:
  cache: true
---


[![pre-commit](https://github.com/liesel-devs/liesel-ptm/actions/workflows/pre-commit.yml/badge.svg)](https://github.com/liesel-devs/liesel-ptm/actions/workflows/pre-commit.yml) [![pytest](https://github.com/liesel-devs/liesel-ptm/actions/workflows/pytest.yml/badge.svg)](https://github.com/liesel-devs/liesel-ptm/actions/workflows/pytest.yml) [![pytest-cov](tests/coverage.svg)](https://github.com/liesel-devs/liesel-ptm/actions/workflows/pytest.yml) [![docs](https://github.com/liesel-devs/liesel-ptm/actions/workflows/docs.yml/badge.svg)](https://github.com/liesel-devs/liesel-ptm/actions/workflows/docs.yml)


## Overview

`liesel_ptm` is a library for Bayesian penalized transformation models (PTMs) for
location and scale. Here's a quick overview:

- The basic model is $Y = \mu(\boldsymbol{x}) + \sigma(\boldsymbol{x}) \varepsilon$.
- The location $\mu(\boldsymbol{x})$ and scale $\sigma(\boldsymbol{x})$ are modeled through structured additive predictors, incorporating a wide range of linear, nonlinear, mixed, and spatial effects in a basis-function framework.
- Inference is conducted using Markov chain Monte Carlo methods.
- The library is built on top of the probabilistic programming framework Liesel. For more on Liesel, see [the Liesel documentation](https://docs.liesel-project.org/en/latest/) and [the Liesel GitHub repository](https://github.com/liesel-devs/liesel).
- [Documentation is available here](https://liesel-devs.github.io/liesel-ptm/)

## Installation

The library can be installed from GitHub:

```bash
pip install "git+https://github.com/liesel-devs/liesel-ptm.git@<VERSION_TAG>#egg=liesel_ptm"
```

In the above line, replace `<VERSION_TAG>` with the desired version to install.
Available releases can be viewed [here](https://github.com/liesel-devs/liesel-ptm/releases).

## Example usage

To demonstrate how the individual parts can be used together, you can find
an example using one covariate below. Specifically, we fit the model:

$$
Y_i = \mu(x_i) + \sigma(x_i) \varepsilon_i, \qquad \mathbb{P}(\varepsilon \leq \varepsilon_i) = \Phi(h(\varepsilon_i)),
$$

where we have

- $i = 1, \dots, N$,
- $\mu(x_i) = \beta_0 + \beta_1 x_i$,
- $\sigma(x_i) = \exp(\gamma_0 + \gamma_1 x_i)$, and
- $h$ an extrapolated, monotonically increasing transformation function with shape parameters $\boldsymbol{\delta} = [\delta_1, \dots, \delta_{J-1}]^{\mathsf{T}}$ as defined in the corresponding paper.

As far as priors are concerned:

- We use constant priors for $\beta_1$ and $\gamma_1$ here, and a first-order random walk prior with variance parameter $\tau^2_{\delta}$ for $\boldsymbol{\delta}$.
- The variance parameter hyperprior is set to $\tau^2_{\delta} \sim \text{Weibull}(0.5, 0.05)$.


### Setup

```{python}
import liesel_ptm as ptm
import liesel.goose as gs

data = ptm.example_data(seed=1812, n=100)
```

### Model definition

```{python}
tau2 = ptm.VarWeibull(value=1.0, scale=0.05, name="tau2_delta")

model = ptm.PTMLocScale.from_nparam(
  y=data.y.to_numpy(),
  nparam=30, # J = 30
  normalization_tau2=tau2
)

model.loc_model += ptm.LinearTerm(x=data.x0.to_numpy(), name="x0_loc")
model.log_scale_model += ptm.LinearTerm(x=data.x0.to_numpy(), name="x0_scale")
```

### Pre-optimization

```{python}
model, position = model.optimize_knots()
graph = model.build_graph(position=position)

```

### MCMC Sampling

```{python}
eb = gs.EngineBuilder(seed=1819, num_chains=4)
eb = model.setup_engine_builder(eb=eb, graph=graph)
eb.set_duration(warmup_duration=1000, posterior_duration=1000)

engine = eb.build()
engine.sample_all_epochs()

results = engine.get_results()
samples = results.get_posterior_samples()
```

### Plotting the conditional density at $x=0$

```{python}
import numpy as np
from plotnine import ggplot, aes, geom_line, geom_ribbon

pred = ptm.PTMLocScalePredictions(
  samples=samples,
  model=model,
  y=np.linspace(-4, 4, 300),
  x0_loc=0.0,
  x0_scale=0.0
)
df_quants = pred.summarise_density_by_quantiles()
```

```{python}
(
  ggplot(df_quants)
  + aes("y", "pdf_mean")
  + geom_line()
  + geom_ribbon(aes(ymin="pdf_lo", ymax="pdf_hi"), alpha=0.3)
)
```


## Acknowledgements

Liesel-PTM is developed by Johannes Brachem with support from Paul Wiemann and Thomas Kneib at the [University of Göttingen](https://www.uni-goettingen.de/en). As a specialized extension, Liesel-PTM belongs to the Liesel project. We are grateful to the [German Research Foundation (DFG)](https://www.dfg.de/en) for funding the development through grant 443179956.

<img src="https://raw.githubusercontent.com/liesel-devs/liesel/main/docs/source/_static/uni-goe.svg" alt="University of Göttingen" align="left" width="350">

<img src="https://raw.githubusercontent.com/liesel-devs/liesel/main/docs/source/_static/funded-by-dfg.svg" alt="Funded by DFG" align="right" width="300">
